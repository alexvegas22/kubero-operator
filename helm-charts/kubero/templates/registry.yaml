{{- if .Values.registry.enabled -}}
{{- $basicAuth := printf "%s:%s" .Values.registry.account.username .Values.registry.account.hash -}}
apiVersion: v1
kind: Secret
metadata:
  name: registry-basic-auth
type: Opaque
data:
  auth: {{ $basicAuth | b64enc }}
---
{{- $dockerAuth := printf "%s:%s" .Values.registry.account.username .Values.registry.account.password -}}
apiVersion: v1
kind: Secret
metadata:
  name: registry-login
type: Opaque
stringData:
  .dockerconfigjson: '{"auths":{"registry.demo.kubero.dev":{"username":"{{ .Values.registry.account.username }}","password":"{{ .Values.registry.account.password }}","auth":"{{ $dockerAuth | b64enc }}"}}}'
---
{{- if .Values.registry.create -}}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kubero-registry-data-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: {{ .Values.registry.storageClassName }}
  resources:
    requests:
      storage: {{ .Values.registry.storage }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: registry
  name: kubero-registry
spec:
  replicas: 1
  selector:
    matchLabels:
      run: registry
  template:
    metadata:
      labels:
        run: registry
    spec:
      containers:
      - name: registry
        image: registry:2
        ports:
        - containerPort: {{ .Values.registry.port }}
        env:
        - name: REGISTRY_HTTP_ADDR
          value: 0.0.0.0:{{ .Values.registry.port }}
        {{- if contains "svc.cluster.local" .Values.registry.host }}
        - name: REGISTRY_HTTP_TLS_CERTIFICATE
          value: /certs/tls.crt
        - name: REGISTRY_HTTP_TLS_KEY
          value: /certs/tls.key
        {{- end }}
        volumeMounts:
        - name: registry-data
          mountPath: /var/lib/registry
          subPath: registry
        {{- if contains "svc.cluster.local" .Values.registry.host }}
        - name: registry-secrets
          mountPath: /certs
          readOnly: true
        {{- end }}
      volumes:
      - name: registry-data
        persistentVolumeClaim:
          claimName: kubero-registry-data-pvc
      {{- if contains "svc.cluster.local" .Values.registry.host }}
      - name: registry-secrets
        secret:
          secretName: kubero-registry-secrets
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: kubero-registry
spec:
  type: ClusterIP
  selector:
    run: registry
  ports:
    - name: registry-tcp
      protocol: TCP
      port: {{ .Values.registry.port }}
      targetPort: {{ .Values.registry.port }}
---
{{- if contains "svc.cluster.local" .Values.registry.host }}
# creates a self-signed certificate for the registry. Requires to configure all nodes to trust the certificates CA or "insecure".
# --> in short: I tried and failed.
#
# apiVersion: cert-manager.io/v1
# kind: ClusterIssuer
# metadata:
#   name: selfsigned-cluster-issuer
# spec:
#   selfSigned: {}

# ---
# apiVersion: cert-manager.io/v1
# kind: Certificate
# metadata:
#   name: my-selfsigned-ca
# spec:
#   isCA: true
#   commonName: my-selfsigned-ca
#   secretName: root-secret
#   privateKey:
#     algorithm: ECDSA
#     size: 256
#   issuerRef:
#     name: selfsigned-cluster-issuer
#     kind: ClusterIssuer
#     group: cert-manager.io

apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: kubero-cert
spec:
  secretName: kubero-registry-secrets

  duration: 43800h # 5Y
  renewBefore: 360h # 15d
  subject:
    organizations:
      - kubero
  # The use of the common name field has been deprecated since 2000 and is
  # discouraged from being used.
  commonName: svc.cluster.local
  isCA: false
  privateKey:
    algorithm: RSA
    encoding: PKCS1
    size: 2048
  usages:
    - server auth
    - client auth
  dnsNames:
    - {{ .Values.registry.host }}
  issuerRef:
    name: selfsigned-cluster-issuer
    kind: ClusterIssuer
    group: cert-manager.io
{{- else -}} #local (else = not local)
kind: Ingress
metadata:
  name: kubero-registry-ingress
  labels:
    {{- include "kubero.labels" . | nindent 4 }}
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: registry-basic-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Kubero Registry'
    {{- with .Values.ingress.annotations }}
    {{- toYaml . | nindent 4}}
    {{- end }}
spec:
  ingressClassName: {{ .Values.ingress.className }}
  tls:
    - hosts:
        - {{ .Values.registry.host }}
      secretName: kubero-registry-tls
  rules:
    - host: {{ .Values.registry.host | quote }}
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: kubero-registry
                port:
                  number: {{ .Values.registry.port }}
{{- end }} #local
{{- end }} #create
{{- end }} #enabled