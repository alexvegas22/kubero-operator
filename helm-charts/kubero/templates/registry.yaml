{{- if .Values.registry.enabled -}}
{{- $basicAuth := printf "%s:%s" .Values.registry.account.username .Values.registry.account.hash -}}
# used by the registry ingress to authenticate users
apiVersion: v1
kind: Secret
metadata:
  name: registry-basic-auth
type: Opaque
data:
  auth: {{ $basicAuth | b64enc }}
---
{{- $dockerAuth := (printf "%s:%s" .Values.registry.account.username .Values.registry.account.password) | b64enc -}}
{{- $dockerconfigjson := printf "{\"auths\":{\"%s\":{\"username\":\"%s\",\"password\":\"%s\",\"auth\":\"%s\"}}}" .Values.registry.host .Values.registry.account.username .Values.registry.account.password $dockerAuth -}}
# copied to pipeline namespace for kpack, nixpack, dockerfile and to pull images
apiVersion: v1
kind: Secret
metadata:
  name: registry-login
type: Opaque
data:
  username: {{ .Values.registry.account.username | b64enc }}
  password: {{ .Values.registry.account.password | b64enc }}
  .dockerconfigjson: {{ $dockerconfigjson | b64enc }}
---
{{- if .Values.registry.create -}}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kubero-registry-data-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: {{ .Values.registry.storageClassName }}
  resources:
    requests:
      storage: {{ .Values.registry.storage }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: registry
  name: kubero-registry
spec:
  replicas: 1
  selector:
    matchLabels:
      run: registry
  template:
    metadata:
      labels:
        run: registry
    spec:
      containers:
      - name: registry
        image: registry:2
        ports:
        - containerPort: 5000
        env:
        - name: REGISTRY_HTTP_ADDR
          value: 0.0.0.0:5000
        volumeMounts:
        - name: registry-data
          mountPath: /var/lib/registry
          subPath: registry
      volumes:
      - name: registry-data
        persistentVolumeClaim:
          claimName: kubero-registry-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: kubero-registry
spec:
  type: ClusterIP
  selector:
    run: registry
  ports:
    - name: registry-tcp
      protocol: TCP
      port: 5000
      targetPort: 5000
---
{{- if .Values.registry.public }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kubero-registry-ingress
  labels:
    {{- include "kubero.labels" . | nindent 4 }}
  annotations:
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    #nginx.ingress.kubernetes.io/whitelist-source-range: 10.0.0.0/8
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: registry-basic-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Kubero Registry'
    nginx.ingress.kubernetes.io/proxy-body-size: '0'
    {{- with .Values.ingress.annotations }}
    {{- toYaml . | nindent 4}}
    {{- end }}
spec:
  ingressClassName: {{ .Values.ingress.className }}
  tls:
    - hosts:
        - {{ .Values.registry.host }}
      secretName: kubero-registry-tls
  rules:
    - host: {{ .Values.registry.host | quote }}
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: kubero-registry
                port:
                  number: 5000
{{- end }} #public
{{- end }} #create
{{- end }} #enabled